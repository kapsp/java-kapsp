class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        List<Integer> combination=new ArrayList<>();
        int start=0;
        backtrack(target,result,combination,start,candidates);
        return result;
    }

    private void backtrack(int target,List<List<Integer>> result,List<Integer> combination,int start,int[] candidates){
        if(target==0){
            result.add(new ArrayList<>(combination));
        }else if(target<0){
            return;
        }

        for(int i=start;i<candidates.length;i++){
            combination.add(candidates[i]);
            backtrack(target-candidates[i],result,combination,i,candidates);
            combination.remove(combination.size()-1);
        }
    }
}