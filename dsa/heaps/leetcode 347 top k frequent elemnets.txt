class Solution {
    public int[] topKFrequent(int[] nums, int k) {

        Map<Integer,Integer> freq=new HashMap<>();

        for(int n:nums){
            if(freq.containsKey(n)){
                freq.put(n,freq.get(n)+1);
            }else{
                freq.put(n,1);
            }
        }

        PriorityQueue<Map.Entry<Integer,Integer>> heap=new PriorityQueue<>((a,b)->a.getValue()-b.getValue());

      
            for(Map.Entry<Integer,Integer> entry:freq.entrySet()){
                heap.offer(entry);
                if(heap.size()>k){
                    heap.poll();
                }
            }
        
        int [] result=new int[k];

        int index=0;

        while(!heap.isEmpty()){
            result[index]=heap.poll().getKey();
            index++;
        }

        return result;
        
    }
}