class Solution {
    public ListNode sortList(ListNode head) {
//uses merge sort in this cas only if head is null return hed and fast at head.next then next.next
        if(head==null||head.next==null){
            return head;
        }
        ListNode mid=getm(head);
        ListNode nextmid=mid.next;
        mid.next=null;

       ListNode left=sortList(head);
       ListNode right=sortList(nextmid);

        return merge(left,right);
        
    }

    public ListNode merge(ListNode left,ListNode right){
        ListNode head1=new ListNode(0);
        ListNode curr=head1;

        while(left!=null&&right!=null){
            if(left.val<=right.val){
                curr.next=left;
                left=left.next;
            }
            else{
                curr.next=right;
                right=right.next;
            }
         curr=curr.next;
        }

        if(left!=null){
                 curr.next=left;
                left=left.next;
        }
        if(right!=null){
            curr.next=right;
            right=right.next;

        }
        return head1.next;
    }

    public ListNode getm(ListNode head){
        if(head==null){
            return head;
        }
        ListNode slow=head;
        ListNode fast=head.next;

        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }

         return slow;        
    }
}