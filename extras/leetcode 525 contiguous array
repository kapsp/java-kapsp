class Solution {
    public int findMaxLength(int[] nums) {

        Map<Integer,Integer> prefixMap=new HashMap<>();
        prefixMap.put(0,-1);
        int sum=0;
        int mlength=0;
        for(int i=0;i<nums.length;i++){
            
            sum+=(nums[i]==1)?1:-1;
            if(prefixMap.containsKey(sum)){
                int subarr=i-prefixMap.get(sum);
                mlength=Math.max(mlength,subarr);
            }else{
                prefixMap.put(sum,i);
            }
            
        }
        return mlength;
        
    }
}

Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 

Example 1:

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.
Example 2:

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
